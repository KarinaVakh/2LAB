#include <iostream>
#include <conio.h>

using namespace std;

class Point {
public:
    // меняем на privat protected
    // protected
    int x, y; // два атрибута
    Point() {// констурктор
        printf("Point()\n");  // отладочный вывод для того чтобы видеть какой констурктор вызывается
        x = 0;
        y = 0; // начальные значения

    }
    Point(int x, int y) {// констурктор с параметрами
        printf("Point(int x, int y)\n");  // отладочный вывод для того чтобы видеть какой констурктор вызывается
        this->x = x;
        this->y = y; // начальные значения

    }
    Point(const Point& p) {// констурктор копирующий переносит все свойства из того обькта который передали
        printf("Point(const Point &p)\n");  // отладочный вывод для того чтобы видеть какой констурктор вызывается
        x = p.x;
        y = p.y; // начальные значения

    }
    ~Point() { // диструктор
        printf("%d, %d\n", x, y); // вывод текущего состояния обьекта чтобы видеть что в нем хранилось когда он удаляется
        printf("~Point()\n");
    }

    void move(int dx, int dy) // метод мув
    {
        x = x + dx; // меняет координаты
        y = y + dy;
    }

    void reset(); // без параметров и реализации
    
};

void Point::reset() { // после объявления класса мы моем написаь реализацию этого метода
    x = 0;
    y = 0;
}

    int main(int arg, char* argv[])
    {
      { 
           Point p; // задаем обьекты статически
           Point p2(10, 20); // задаем обьекты статически
            Point p3(p2);    // (при выволе создастся 3 обьекта с помощью трез констуркторов (удалится 2. 3. 1 обьекты) (это были классы атрибуты конструкторы , уничтожение статтически созданных обьектов), создание статических обьектов
      }

      {
          Point* p = new Point; // указатели динамически обьекты
          Point* p2 = new Point(10, 20); // 
          Point* p3 = new Point(*p2);    // копирование требует от нас указатель мы разыменовываем его
          delete p;//  сами мы должны удалить чтобы увидеть работу диструктора, удаляются в порядке, в котором мы их удаляем 
          delete p2; // создание дин обьектоы создание обьектов с помощью констр , удаление дин обьектов
          delete p3;
      }

      // если методы сделать приватными p->x то нельзя будет потому что никаие свойтсва не будут доступны protected++ public p->x=5
// для мув
    {Point* p = new Point(1,2); // обьект с заданными координатами

    p->reset();     //reset  // это были проверка доступности атр и метод, реализация методов сразу и после определения, реализации констр и дистр
    p->move(10,10); // обратиться к ссвойтсвам мы не можем но вызвать метод можем
    delete p;
    // при удалении координаты точки совсем другие
    }

      _getch();
        return 0;
 
 
    

    }
